{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","radiusPlanet","buildings","Array","fill","map","_","i","height","Math","random","width","depth","rotateY","rotateZ","Controls","controls","useRef","useThree","camera","gl","useFrame","current","update","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","Building","position","attach","color","SpaceScene","rotation","x","y","transparent","opacity","b","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAIAA,YAAO,CAAEC,oBAET,IAAMC,EAAe,EAEfC,EAAY,IAAIC,MAAM,KAAKC,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CACzDC,OAAQ,GAAM,GAAMC,KAAKC,SACzBC,MAAO,GAAM,GAAMF,KAAKC,SACxBE,MAAO,GAAM,GAAMH,KAAKC,SACxBG,QAAS,IAAMJ,KAAKC,SACpBI,QAAe,IAAML,KAAKC,SAAhB,OAGZ,SAASK,IACP,IAAMC,EAAWC,mBADC,EAEKC,cAAfC,EAFU,EAEVA,OAAQC,EAFE,EAEFA,GAEhB,OADAC,aAAS,kBAAML,EAASM,QAAQC,YAE9B,mCACEC,IAAKR,EACLS,KAAM,CAACN,EAAQC,EAAGM,YAClBC,eAAa,EACbC,cAAe,GACfC,YAAa,KAKnB,SAASC,EAAT,GAA6C,IAAzBtB,EAAwB,EAAxBA,OAAQG,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACjC,OACE,0BAAMmB,SAAU,CAAC,EAAG9B,EAAe,GAAMO,EAAS,EAAG,IACnD,uCAAmBwB,OAAO,WAAWP,KAAM,CAACd,EAAOH,EAAQI,KAC3D,yCAAqBoB,OAAO,WAAWC,MAAO,YAKpD,SAASC,IACP,IAAMV,EAAMP,mBAGZ,OAFAI,aAAS,kBAAOG,EAAIF,QAAQa,SAASC,EAAIZ,EAAIF,QAAQa,SAASE,GAAK,OAGjE,+BACE,kCAAcZ,KAAM,CAAC,SAAU,MAC/B,sCAAkBA,KAAM,CAAC,SAAU,IAAMM,SAAU,CAAC,EAAG,EAAG,KAC1D,2BAAOP,IAAKA,GACV,8BACE,0CACEQ,OAAO,WACPP,KAAM,CAACxB,EAAc,GAAI,MAE3B,yCACE+B,OAAO,WACPC,MAAO,MACPK,aAAa,EACbC,QAAS,MAGZrC,EAAUG,KAAI,SAACmC,EAAGjC,GAAJ,OACb,2BAAOkC,IAAKlC,EAAG4B,SAAU,CAAC,EAAGK,EAAE3B,QAAS2B,EAAE1B,UACxC,kBAACgB,EAAD,CAAUnB,MAAO6B,EAAE7B,MAAOH,OAAQgC,EAAEhC,OAAQI,MAAO4B,EAAE5B,cAiBlD8B,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC3B,EAAD,MACA,kBAACmB,EAAD,QC/DcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31c46bc6.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Canvas, extend, useFrame, useThree } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nextend({ OrbitControls });\n\nconst radiusPlanet = 1;\n\nconst buildings = new Array(100).fill(null).map((_, i) => ({\n  height: 0.2 + 0.4 * Math.random(),\n  width: 0.1 + 0.1 * Math.random(),\n  depth: 0.1 + 0.1 * Math.random(),\n  rotateY: 360 * Math.random(),\n  rotateZ: -60 + 120 * Math.random()\n}));\n\nfunction Controls() {\n  const controls = useRef();\n  const { camera, gl } = useThree();\n  useFrame(() => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, gl.domElement]}\n      enableDamping\n      dampingFactor={0.1}\n      rotateSpeed={0.5}\n    />\n  );\n}\n\nfunction Building({ height, width, depth }) {\n  return (\n    <mesh position={[0, radiusPlanet - 0.1 + height / 2, 0]}>\n      <boxBufferGeometry attach=\"geometry\" args={[width, height, depth]} />\n      <meshLambertMaterial attach=\"material\" color={0xff0000} />\n    </mesh>\n  );\n}\n\nfunction SpaceScene() {\n  const ref = useRef();\n  useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01));\n\n  return (\n    <scene>\n      <ambientLight args={[0xffffff, 0.2]} />\n      <directionalLight args={[0xffffff, 0.5]} position={[1, 1, 1]} />\n      <group ref={ref}>\n        <mesh>\n          <sphereBufferGeometry\n            attach=\"geometry\"\n            args={[radiusPlanet, 36, 36]}\n          />\n          <meshLambertMaterial\n            attach=\"material\"\n            color={0x00ff00}\n            transparent={true}\n            opacity={0.5}\n          />\n        </mesh>\n        {buildings.map((b, i) => (\n          <group key={i} rotation={[0, b.rotateY, b.rotateZ]}>\n            <Building width={b.width} height={b.height} depth={b.depth} />\n          </group>\n        ))}\n      </group>\n    </scene>\n  );\n}\n\nfunction App() {\n  return (\n    <Canvas>\n      <Controls />\n      <SpaceScene />\n    </Canvas>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}